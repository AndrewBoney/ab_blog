{
  
    
        "post0": {
            "title": "XGPU",
            "content": "I recently discovered when working on a kaggle project that you can run XGBoost models on a GPU. For the model I was running at the time performance was very impressive, so I wanted to investigate further. . How this works . I don&#39;t want this to baloon into a huge post, so I&#39;m going to assume (a) that anyone reading this has at least a basic understanding of how gradient boosted trees work and (b) the difference between GPU and CPU, and how to access a GPU for running ML models (for reference I&#39;ve used Google Colab with GPU runtime here). . . With that out of the way, I&#39;ll get into it. I discovered recently that you can run a XGBoost model on a GPU only needing to change a single parameter. This seemed to me like it had a lot of potential to make it easier to build powerful ML models with limited local resources. While of course there is tonnes of options available for running Neural Nets on GPUs, sometimes it is easier to dump your variables into a tree based model, rather than spending forever building a Deep Learning architecture that works for your problem. . This works by using a histogram based approximation approach popularised by the LightGBM package. This ends up being much more efficient and just as accurate as the traditional approach. With the XGBoost Skikit Learn API you do this by setting tree_method parameter to &quot;hist&quot; or &quot;gpu_hist&quot; when initialising the model to build on a CPU or GPU respectively, by default it will use &quot;exact&quot; for smaller datasets, or &quot;aprox&quot; for larger datasets. . For more details on tree methods available in the XGBoost package read https://xgboost.readthedocs.io/en/stable/treemethod.html. . Import Libraries and Create Data . This is mostly self explanatory. Required libraries are imported, and make_classification from sklearn is used to create a dummy dataset. I&#39;ve set a parameter at the top for the number of samples in the data; this can easily be changed if you wanted to benchmark performance at different data sizes. . import numpy as np import pandas as pd import random from time import time from xgboost import XGBClassifier from sklearn.metrics import accuracy_score from sklearn.datasets import make_classification from sklearn.model_selection import train_test_split, RandomizedSearchCV from plotnine import (ggplot, aes, geom_point, facet_wrap, theme_classic) . num_samples = 100000 . X, y_class = make_classification(n_samples=num_samples, n_features=20, n_informative=8, n_redundant=4, n_repeated=0, n_classes=4, n_clusters_per_class=10, random_state=1) X_train, X_test, y_train, y_test = train_test_split(X, y_class, test_size=0.2, random_state=2) print(X_train.shape, X_test.shape, y_train.shape, y_test.shape) . (80000, 20) (20000, 20) (80000,) (20000,) . Tune . Before benchmarking I want to make sure that I&#39;m using sensible hyperparameters. I&#39;m using randomized search, and will use the parameters from the model with the best performance. . tune = XGBClassifier(tree_method = &quot;gpu_hist&quot;) params = {&quot;max_depth&quot;: np.arange(3, 10+1), &quot;min_child_weight&quot;: np.arange(0, 4+1), &quot;max_bin&quot;: np.arange(64, (256*2) + 64, 64), &quot;grow_policy&quot;: [&quot;depthwise&quot;, &quot;lossguide&quot;], &quot;n_estimators&quot;: np.arange(100, 600, 100)} rsc = RandomizedSearchCV(tune, params, cv = 5, n_iter = 20) start = time() rsc.fit(X_train, y_train) print(&quot;Randomised Search took&quot;, round(time() - start, 0), &quot;seconds&quot;) . Randomised Search took 1422.0 seconds . results_cv = pd.DataFrame(rsc.cv_results_).sort_values([&quot;rank_test_score&quot;]) param_cols = list(results_cv.columns[results_cv.columns.str.startswith(&quot;param_&quot;)]) param_cols.remove(&quot;param_grow_policy&quot;) # categorical long_results = results_cv.melt(id_vars = [&quot;mean_test_score&quot;, &quot;std_test_score&quot;, &quot;mean_fit_time&quot;, &quot;std_fit_time&quot;, &quot;param_grow_policy&quot;], value_vars = param_cols) . (ggplot(long_results, aes(&quot;value&quot;, &quot;mean_test_score&quot;, color = &quot;param_grow_policy&quot;)) + geom_point() + facet_wrap(&quot;variable&quot;, scales = &quot;free&quot;)) . /usr/local/lib/python3.7/dist-packages/plotnine/utils.py:1246: FutureWarning: is_categorical is deprecated and will be removed in a future version. Use is_categorical_dtype instead if pdtypes.is_categorical(arr): . &lt;ggplot: (8793804083869)&gt; . It looks like max_depth is the only parameter that we can benefit from changing. If I was doing this on real data, I&#39;d tune further with grid search, but accuracy doesn&#39;t matter here so I&#39;m not going to bother. . Compare and Test . I&#39;m going to test 3 different tree building strategies: . &quot;exact&quot;, no approximation. | &quot;hist&quot;, histogram approximation based on LightGBM, processed on CPU. | &quot;gpu_hist&quot;, histogram approximation, processed on GPU. | . NB - I&#39;ve included &quot;exact&quot; to benchmark time, but given that hyperparameters were tuned using the hist method the accuracy isn&#39;t comparable. . First, define a function for getting accuracy by class. . def acc_by_class(true, pred): pred_df = pd.DataFrame({&quot;Target&quot;: true, &quot;pred&quot;: pred}) pred_df[&quot;correct&quot;] = (pred_df[&quot;Target&quot;] == pred_df[&quot;pred&quot;]) return pred_df.groupby(&quot;Target&quot;).agg({&quot;correct&quot;: [&quot;mean&quot;, &quot;count&quot;]}) . Exact . start = time() xgb_exact = XGBClassifier(tree_method = &quot;exact&quot;, **rsc.best_params_) xgb_exact.fit(X_train, y_train) print(&quot;Exact (CPU): Took&quot;, round(time() - start, 0), &quot;seconds&quot;) . Exact (CPU): Took 597.0 seconds . exact_pred = xgb_exact.predict(X_test) display(acc_by_class(y_test, exact_pred)) print(&quot; nAccuracy Score:&quot;, accuracy_score(y_test, exact_pred)) . correct . mean count . Target . 0 0.692460 | 5040 | . 1 0.724049 | 5019 | . 2 0.685542 | 4980 | . 3 0.722838 | 4961 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Accuracy Score: 0.7062 . Hist (CPU) . start = time() xgb_cpuhist = XGBClassifier(tree_method = &quot;hist&quot;, **rsc.best_params_) xgb_cpuhist.fit(X_train, y_train) print(&quot;Hist (CPU): Took&quot;, round(time() - start, 0), &quot;seconds&quot;) . Hist (CPU): Took 324.0 seconds . cpuhist_pred = xgb_cpuhist.predict(X_test) display(acc_by_class(y_test, cpuhist_pred)) print(&quot; nAccuracy Score:&quot;, accuracy_score(y_test, cpuhist_pred)) . correct . mean count . Target . 0 0.702778 | 5040 | . 1 0.734808 | 5019 | . 2 0.707631 | 4980 | . 3 0.729692 | 4961 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Accuracy Score: 0.7187 . Hist (GPU) . start = time() xgb_gpu = XGBClassifier(tree_method = &quot;gpu_hist&quot;, **rsc.best_params_) xgb_gpu.fit(X_train, y_train) print(&quot;Hist (GPU): Took&quot;, round(time() - start, 0), &quot;seconds&quot;) . Hist (GPU): Took 51.0 seconds . gpu_pred = xgb_gpu.predict(X_test) display(acc_by_class(y_test, gpu_pred)) print(&quot; nAccuracy Score:&quot;, accuracy_score(y_test, gpu_pred)) . correct . mean count . Target . 0 0.706548 | 5040 | . 1 0.728033 | 5019 | . 2 0.702209 | 4980 | . 3 0.734731 | 4961 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Accuracy Score: 0.71785 . Conclusion . Running XGBoost models on GPUs can speed things up drastically. On this data, we see a roughly 10 fold improvement compared to the default method. Some of this is due to the different tree method used; when we compare the model built using the same method on CPU and GPU we see a roughly 5 fold improvement on the GPU. To me this feels like it could be hugely beneficial for building ML models on tabular data. In particular this can turn hyperparameter training from a task that takes days to a task that takes hours. . TODO . As with everything, I could have gone further with this. I&#39;ve listed below a few things I would like to do if time was no object: . Benchmark with different numbers of features and samples. | Run each model multiple times to get a more accurate benchmarks. | Properly review the histogram based approximation method used. https://proceedings.neurips.cc/paper/2017/file/6449f44a102fde848669bdd9eb6b76fa-Paper.pdf is likely to be the best resource. | Test feasability of running XGBoost on GPU in R. Theoretically possible, not sure in practice. | .",
            "url": "https://andrewboney.github.io/ab_blog/fastpages/jupyter/2022/06/03/XGPU.html",
            "relUrl": "/fastpages/jupyter/2022/06/03/XGPU.html",
            "date": " • Jun 3, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://andrewboney.github.io/ab_blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://andrewboney.github.io/ab_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi. I’m Andy. . I’ve been working as a Data Scientist in the Market Research sector for ~ 4 years at the time of writing this (May 2022). Most of my experience is based around building unsupervised models, such as Customer / Category Segmentations, or analytical models e.g. analysing the incremental uplift of a promotional campaign. While my job titles have always basically been “Data Scientists”, I don’t have as much experience as I’d like with what Big Tech thinks of as “Data Science”, i.e. Deep Learning. I’m trying to expose myself more to this world through courses like fastai, and reading more research papers. However fundamentally my interest is in doing things practically; so while theory is important, if I’m only talking about academic research on here then I’m not using it how I want to be. . I’m also really interested in cooking, and have wanted to start a cooking blog for literally years. In practice I’m not sure how easy it will be to do that with notebooks, but if I can I might. .",
          "url": "https://andrewboney.github.io/ab_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://andrewboney.github.io/ab_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}